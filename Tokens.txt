=== TOKENS ENCONTRADOS ===
399
[L:1,C:1] : // Indica que estamos en el archivo principal
[L:2,C:1] : fn
[L:2,C:4] : main
[L:2,C:8] : (
[L:2,C:9] : )
[L:2,C:11] : {
[L:3,C:5] : println
[L:3,C:12] : !
[L:3,C:13] : (
[L:3,C:14] : "Hola, mundo!"
[L:3,C:28] : )
[L:3,C:29] : ;
[L:3,C:31] : // Imprime un mensaje en consola
[L:5,C:5] : println
[L:5,C:12] : !
[L:5,C:13] : (
[L:5,C:14] : "\n\nTipos de datos"
[L:5,C:34] : )
[L:5,C:35] : ;
[L:6,C:5] : tipos_datos
[L:6,C:16] : (
[L:6,C:17] : )
[L:6,C:18] : ;
[L:8,C:5] : println
[L:8,C:12] : !
[L:8,C:13] : (
[L:8,C:14] : "\n\nCondicionales"
[L:8,C:33] : )
[L:8,C:34] : ;
[L:9,C:5] : condicionales
[L:9,C:18] : (
[L:9,C:19] : )
[L:9,C:20] : ;
[L:11,C:5] : println
[L:11,C:12] : !
[L:11,C:13] : (
[L:11,C:14] : "\n\nCiclo For"
[L:11,C:29] : )
[L:11,C:30] : ;
[L:12,C:5] : ciclo_for
[L:12,C:14] : (
[L:12,C:15] : )
[L:12,C:16] : ;
[L:14,C:5] : println
[L:14,C:12] : !
[L:14,C:13] : (
[L:14,C:14] : "\n\nArreglos"
[L:14,C:28] : )
[L:14,C:29] : ;
[L:15,C:5] : arreglos
[L:15,C:13] : (
[L:15,C:14] : )
[L:15,C:15] : ;
[L:17,C:5] : println
[L:17,C:12] : !
[L:17,C:13] : (
[L:17,C:14] : "\n\nMapeo"
[L:17,C:25] : )
[L:17,C:26] : ;
[L:18,C:5] : mapeo
[L:18,C:10] : (
[L:18,C:11] : )
[L:18,C:12] : ;
[L:20,C:5] : println
[L:20,C:12] : !
[L:20,C:13] : (
[L:20,C:14] : "\n\nEstructuras"
[L:20,C:31] : )
[L:20,C:32] : ;
[L:21,C:5] : estructuras
[L:21,C:16] : (
[L:21,C:17] : )
[L:21,C:18] : ;
[L:22,C:1] : }
[L:24,C:1] : // Funcion que demuestra uso de tipos de datos
[L:25,C:1] : fn
[L:25,C:4] : tipos_datos
[L:25,C:15] : (
[L:25,C:16] : )
[L:25,C:18] : {
[L:26,C:5] : let
[L:26,C:9] : nombre
[L:26,C:16] : =
[L:26,C:18] : "Juan"
[L:26,C:24] : ;
[L:26,C:26] : // Declara una variable inmutable
[L:27,C:5] : let
[L:27,C:9] : edad
[L:27,C:13] : :
[L:27,C:15] : i32
[L:27,C:19] : =
[L:27,C:21] : 30
[L:27,C:23] : ;
[L:27,C:26] : // Declara una variable con tipo explicito
[L:28,C:5] : println
[L:28,C:12] : !
[L:28,C:13] : (
[L:28,C:14] : "Hola, {}! Tienes {} años."
[L:28,C:42] : ,
[L:28,C:44] : nombre
[L:28,C:50] : ,
[L:28,C:52] : edad
[L:28,C:56] : )
[L:28,C:57] : ;
[L:28,C:59] : // Imprime mensaje formateado
[L:29,C:1] : }
[L:31,C:1] : // Función que demuestra una estructura condicional
[L:32,C:1] : fn
[L:32,C:4] : condicionales
[L:32,C:17] : (
[L:32,C:18] : )
[L:32,C:20] : {
[L:33,C:5] : let
[L:33,C:9] : numero
[L:33,C:16] : =
[L:33,C:18] : 10
[L:33,C:20] : ;
[L:34,C:5] : if
[L:34,C:8] : numero
[L:34,C:15] : %
[L:34,C:17] : 2
[L:34,C:19] : ==
[L:34,C:22] : 0
[L:34,C:24] : {
[L:34,C:26] : // Verifica si el numero es par
[L:35,C:9] : println
[L:35,C:16] : !
[L:35,C:17] : (
[L:35,C:18] : "El numero es par."
[L:35,C:37] : )
[L:35,C:38] : ;
[L:36,C:5] : }
[L:36,C:7] : else
[L:36,C:12] : {
[L:37,C:9] : println
[L:37,C:16] : !
[L:37,C:17] : (
[L:37,C:18] : "El numero es impar."
[L:37,C:39] : )
[L:37,C:40] : ;
[L:38,C:5] : }
[L:39,C:1] : }
[L:41,C:1] : // Funcion que muestra un ciclo for
[L:42,C:1] : fn
[L:42,C:4] : ciclo_for
[L:42,C:13] : (
[L:42,C:14] : )
[L:42,C:16] : {
[L:43,C:5] : for
[L:43,C:9] : i
[L:43,C:11] : in
[L:43,C:14] : 0.
[L:43,C:16] : .
[L:43,C:17] : 8
[L:43,C:19] : {
[L:43,C:21] : // Recorre del 0 al 7
[L:44,C:9] : println
[L:44,C:16] : !
[L:44,C:17] : (
[L:44,C:18] : "Iteracion: {}"
[L:44,C:33] : ,
[L:44,C:35] : i
[L:44,C:36] : )
[L:44,C:37] : ;
[L:45,C:5] : }
[L:46,C:1] : }
[L:48,C:1] : // Funcion que muestra uso de vectores
[L:49,C:1] : fn
[L:49,C:4] : arreglos
[L:49,C:12] : (
[L:49,C:13] : )
[L:49,C:15] : {
[L:50,C:5] : let
[L:50,C:9] : numeros
[L:50,C:17] : =
[L:50,C:19] : [
[L:50,C:20] : 1
[L:50,C:21] : ,
[L:50,C:23] : 2
[L:50,C:24] : ,
[L:50,C:26] : 3
[L:50,C:27] : ,
[L:50,C:29] : 4
[L:50,C:30] : ,
[L:50,C:32] : 5
[L:50,C:33] : ]
[L:50,C:34] : ;
[L:50,C:36] : // Arreglo de enteros con tamanio fijo
[L:51,C:5] : let
[L:51,C:9] : mut
[L:51,C:13] : tallas
[L:51,C:20] : =
[L:51,C:22] : vec
[L:51,C:25] : !
[L:51,C:26] : [
[L:51,C:27] : "S"
[L:51,C:30] : ,
[L:51,C:32] : "M"
[L:51,C:35] : ,
[L:51,C:37] : "L"
[L:51,C:40] : ,
[L:51,C:42] : "XL"
[L:51,C:46] : ,
[L:51,C:48] : "XXL"
[L:51,C:53] : ]
[L:51,C:54] : ;
[L:51,C:56] : // Vector (slice dinamico)
[L:53,C:5] : println
[L:53,C:12] : !
[L:53,C:13] : (
[L:53,C:14] : "Arreglo de numeros: {:?}"
[L:53,C:40] : ,
[L:53,C:42] : numeros
[L:53,C:49] : )
[L:53,C:50] : ;
[L:53,C:52] : // {:?} para imprimir estructuras complejas
[L:54,C:5] : println
[L:54,C:12] : !
[L:54,C:13] : (
[L:54,C:14] : "Slice de tallas: {:?}"
[L:54,C:37] : ,
[L:54,C:39] : tallas
[L:54,C:45] : )
[L:54,C:46] : ;
[L:56,C:5] : tallas
[L:56,C:11] : .
[L:56,C:12] : push
[L:56,C:16] : (
[L:56,C:17] : "XXXL"
[L:56,C:23] : )
[L:56,C:24] : ;
[L:56,C:26] : // Agrega una talla al final del vector
[L:57,C:5] : println
[L:57,C:12] : !
[L:57,C:13] : (
[L:57,C:14] : "Tallas actualizadas: {:?}"
[L:57,C:41] : ,
[L:57,C:43] : tallas
[L:57,C:49] : )
[L:57,C:50] : ;
[L:58,C:1] : }
[L:60,C:1] : // Funcion que muestra uso de mapas
[L:61,C:1] : fn
[L:61,C:4] : mapeo
[L:61,C:9] : (
[L:61,C:10] : )
[L:61,C:12] : {
[L:62,C:5] : use
[L:62,C:9] : std
[L:62,C:12] : ::
[L:62,C:14] : collections
[L:62,C:25] : ::
[L:62,C:27] : HashMap
[L:62,C:34] : ;
[L:64,C:5] : let
[L:64,C:9] : mut
[L:64,C:13] : disponibles
[L:64,C:25] : =
[L:64,C:27] : HashMap
[L:64,C:34] : ::
[L:64,C:36] : new
[L:64,C:39] : (
[L:64,C:40] : )
[L:64,C:41] : ;
[L:64,C:43] : // Crea un nuevo HashMap
[L:65,C:5] : disponibles
[L:65,C:16] : .
[L:65,C:17] : insert
[L:65,C:23] : (
[L:65,C:24] : "Azul"
[L:65,C:30] : ,
[L:65,C:32] : 10
[L:65,C:34] : )
[L:65,C:35] : ;
[L:66,C:5] : disponibles
[L:66,C:16] : .
[L:66,C:17] : insert
[L:66,C:23] : (
[L:66,C:24] : "Rojo"
[L:66,C:30] : ,
[L:66,C:32] : 5
[L:66,C:33] : )
[L:66,C:34] : ;
[L:67,C:5] : disponibles
[L:67,C:16] : .
[L:67,C:17] : insert
[L:67,C:23] : (
[L:67,C:24] : "Verde"
[L:67,C:31] : ,
[L:67,C:33] : 8
[L:67,C:34] : )
[L:67,C:35] : ;
[L:68,C:5] : disponibles
[L:68,C:16] : .
[L:68,C:17] : insert
[L:68,C:23] : (
[L:68,C:24] : "Amarillo"
[L:68,C:34] : ,
[L:68,C:36] : 3
[L:68,C:37] : )
[L:68,C:38] : ;
[L:68,C:40] : // Agrega un nuevo elemento
[L:70,C:5] : // Accede e imprime valores especificos
[L:71,C:5] : if
[L:71,C:8] : let
[L:71,C:12] : Some
[L:71,C:16] : (
[L:71,C:17] : rojo
[L:71,C:21] : )
[L:71,C:23] : =
[L:71,C:25] : disponibles
[L:71,C:36] : .
[L:71,C:37] : get
[L:71,C:40] : (
[L:71,C:41] : "Rojo"
[L:71,C:47] : )
[L:71,C:49] : {
[L:72,C:9] : println
[L:72,C:16] : !
[L:72,C:17] : (
[L:72,C:18] : "Camisas Rojas Disponibles: {}"
[L:72,C:49] : ,
[L:72,C:51] : rojo
[L:72,C:55] : )
[L:72,C:56] : ;
[L:73,C:5] : }
[L:75,C:5] : println
[L:75,C:12] : !
[L:75,C:13] : (
[L:75,C:14] : "Inventario de Camisas: {:?}"
[L:75,C:43] : ,
[L:75,C:45] : disponibles
[L:75,C:56] : )
[L:75,C:57] : ;
[L:76,C:1] : }
[L:78,C:1] : // Funcion que muestra uso de estructuras
[L:79,C:1] : fn
[L:79,C:4] : estructuras
[L:79,C:15] : (
[L:79,C:16] : )
[L:79,C:18] : {
[L:80,C:5] : // Declaracion de la estructura Estudiante
[L:81,C:5] : struct
[L:81,C:12] : Estudiante
[L:81,C:23] : {
[L:82,C:9] : nombre
[L:82,C:15] : :
[L:82,C:17] : String
[L:82,C:23] : ,
[L:83,C:9] : numero_cuenta
[L:83,C:22] : :
[L:83,C:24] : i32
[L:83,C:27] : ,
[L:84,C:5] : }
[L:86,C:5] : // Instancia de la estructura
[L:87,C:5] : let
[L:87,C:9] : estudiante
[L:87,C:20] : =
[L:87,C:22] : Estudiante
[L:87,C:33] : {
[L:88,C:9] : nombre
[L:88,C:15] : :
[L:88,C:17] : String
[L:88,C:23] : ::
[L:88,C:25] : from
[L:88,C:29] : (
[L:88,C:30] : "Tiffanny"
[L:88,C:40] : )
[L:88,C:41] : ,
[L:89,C:9] : numero_cuenta
[L:89,C:22] : :
[L:89,C:24] : 11811146
[L:89,C:32] : ,
[L:90,C:5] : }
[L:90,C:6] : ;
[L:92,C:5] : // Imprimir los campos de la estructura
[L:93,C:5] : println
[L:93,C:12] : !
[L:93,C:13] : (
[L:93,C:14] : "Informacion del Estudiante:"
[L:93,C:43] : )
[L:93,C:44] : ;
[L:94,C:5] : println
[L:94,C:12] : !
[L:94,C:13] : (
[L:94,C:14] : "Nombre: {} Edad: {}"
[L:94,C:35] : ,
[L:94,C:37] : estudiante
[L:94,C:47] : .
[L:94,C:48] : nombre
[L:94,C:54] : ,
[L:94,C:56] : estudiante
[L:94,C:66] : .
[L:94,C:67] : numero_cuenta
[L:94,C:80] : )
[L:94,C:81] : ;
[L:95,C:1] : }
[L:96,C:1] : // Este es un ejemplo de un programa en Rust que muestra varios conceptos basicos
[L:96,C:82] : 
=== FIN TOKENS ===
